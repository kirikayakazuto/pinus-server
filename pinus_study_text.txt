pinus 一个游戏服务器框架
基于node.js开发

运行架构说明：
    客户端通过websocket长连接连到connector服务器群。
    connector负责承载连接，并把请求转发到后端的服务器群。
    后端的服务器群主要包括按场景分区的场景服务器(area)、聊天服务器(chat)和状态服务器等(status)， 这些服务器负责各自的业务逻辑。真实的案例中还会有各种其它类型的服务器。
    后端服务器处理完逻辑后把结果返回给connector， 再由connector广播回给客户端。
    master负责统一管理这些服务器，包括各服务器的启动、监控和关闭等功能。

pinus的架构设计目标

    服务器（进程）的抽象与扩展
    在web应用中， 每个服务器是无状态、对等的， 开发者无需通过框架或容器来管理服务器。 但游戏应用不同， 游戏可能需要包含多种不同类型的服务器，每类服务器在数量上也可能有不同的需求。这就需要框架对服务器进行抽象和解耦，支持服务器类型和数量上的扩展。

    客户端的请求、响应、广播
    客户端的请求、响应与web应用是类似的， 但框架是基于长连接的， 实现模式与http请求有一定差别。 广播是游戏服务器最频繁的操作， 需要方便的API， 并且在性能上达到极致。

    服务器间的通讯、调用
    尽管框架尽量避免跨进程调用，但进程间的通讯是不可避免的， 因此需要一个方便好用的RPC框架来支撑。

    ＊ 松耦合、可插拔的应用架构。

    应用的扩展性很重要， pinus framework支持以component的形式插入任何第三方组件, 也支持加入自定义的路由规则， 自定义的filter等。





-> 服务器的对外接口只有两类， 
一类是接收客户端的请求， 叫做handler， 
一类是接收RPC请求， 叫做remote， 
handler和remote的行为决定了服务器长什么样子。 因此我们只要定义好handler和remote两类的行为， 就可以确定这个服务器的类型。