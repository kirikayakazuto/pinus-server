"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pinus_logger_1 = require("pinus-logger");
let logger = pinus_logger_1.getLogger('pinus-rpc', 'failprocess');
const constants_1 = require("../util/constants");
function failureProcess(code, tracer, serverId, msg, opts) {
    let cb = tracer && tracer.cb;
    let mode = opts.failMode;
    let FAIL_MODE = constants_1.constants.FAIL_MODE;
    let method = failfast;
    if (mode === FAIL_MODE.FAILOVER) {
        method = failover;
    }
    else if (mode === FAIL_MODE.FAILBACK) {
        method = failback;
    }
    else if (mode === FAIL_MODE.FAILFAST) {
    }
    // switch (mode) {
    //     case constants.FAIL_MODE.FAILOVER:
    //         method = failover;
    //         break;
    //     case constants.FAIL_MODE.FAILBACK:
    //         method = failback;
    //         break;
    //     case constants.FAIL_MODE.FAILFAST:
    //         method = failfast;
    //         break;
    //     case constants.FAIL_MODE.FAILSAFE:
    //     default:
    //         method = failfast;
    //         break;
    // }
    method.call(this, code, tracer, serverId, msg, opts, cb);
}
exports.failureProcess = failureProcess;
/**
 * Failover rpc failure process. This will try other servers with option retries.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failover = function (code, tracer, serverId, msg, opts, cb) {
    let servers;
    let self = this;
    let counter = 0;
    let success = true;
    let serverType = msg.serverType;
    if (!tracer || !tracer.servers) {
        servers = self.serversMap[serverType];
    }
    else {
        servers = tracer.servers;
    }
    let index = servers.indexOf(serverId);
    if (index >= 0) {
        servers.splice(index, 1);
    }
    tracer && (tracer.servers = servers);
    if (!servers.length) {
        logger.error('[pinus-rpc] rpc failed with all this type of servers, with serverType: %s', serverType);
        cb(new Error('rpc failed with all this type of servers, with serverType: ' + serverType));
        return;
    }
    self.dispatch.call(self, tracer, servers[0], msg, opts, cb);
};
/**
 * Failsafe rpc failure process.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failsafe = function (code, tracer, serverId, msg, opts, cb) {
    let self = this;
    let retryTimes = opts.retryTimes || constants_1.constants.DEFAULT_PARAM.FAILSAFE_RETRIES;
    let retryConnectTime = opts.retryConnectTime || constants_1.constants.DEFAULT_PARAM.FAILSAFE_CONNECT_TIME;
    if (!tracer.retryTimes) {
        tracer.retryTimes = 1;
    }
    else {
        tracer.retryTimes += 1;
    }
    switch (code) {
        case constants_1.constants.RPC_ERROR.SERVER_NOT_STARTED:
        case constants_1.constants.RPC_ERROR.NO_TRAGET_SERVER:
            cb(new Error('rpc client is not started or cannot find remote server.'));
            break;
        case constants_1.constants.RPC_ERROR.FAIL_CONNECT_SERVER:
            if (tracer.retryTimes <= retryTimes) {
                setTimeout(function () {
                    self.connect(tracer, serverId, cb);
                }, retryConnectTime * tracer.retryTimes);
            }
            else {
                cb(new Error('rpc client failed to connect to remote server: ' + serverId));
            }
            break;
        case constants_1.constants.RPC_ERROR.FAIL_FIND_MAILBOX:
        case constants_1.constants.RPC_ERROR.FAIL_SEND_MESSAGE:
            if (tracer.retryTimes <= retryTimes) {
                setTimeout(function () {
                    self.dispatch.call(self, tracer, serverId, msg, opts, cb);
                }, retryConnectTime * tracer.retryTimes);
            }
            else {
                cb(new Error('rpc client failed to send message to remote server: ' + serverId));
            }
            break;
        case constants_1.constants.RPC_ERROR.FILTER_ERROR:
            cb(new Error('rpc client filter encounters error.'));
            break;
        default:
            cb(new Error('rpc client unknown error.'));
    }
};
/**
 * Failback rpc failure process. This will try the same server with sendInterval option and retries option.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failback = function (code, tracer, serverId, msg, opts, cb) {
    // todo record message in background and send the message at timing
};
/**
 * Failfast rpc failure process. This will ignore error in rpc client.
 *
 * @param code {Number} error code number.
 * @param tracer {Object} current rpc tracer.
 * @param serverId {String} rpc remote target server id.
 * @param msg {Object} rpc message.
 * @param opts {Object} rpc client options.
 * @param cb {Function} user rpc callback.
 *
 * @api private
 */
let failfast = function (code, tracer, serverId, msg, opts, cb) {
    logger.error('rpc failed with error, remote server: %s, msg: %j, error code: %s', serverId, msg, code);
    cb && cb(new Error('rpc failed with error code: ' + code));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpbHVyZVByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcnBjLWNsaWVudC9mYWlsdXJlUHJvY2Vzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUF5QztBQUN6QyxJQUFJLE1BQU0sR0FBRyx3QkFBUyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNuRCxpREFBOEM7QUFHOUMsd0JBQTBDLElBQVksRUFBRSxNQUFXLEVBQUUsUUFBZ0IsRUFBRSxHQUFXLEVBQUUsSUFBd0I7SUFDeEgsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDN0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixJQUFJLFNBQVMsR0FBRyxxQkFBUyxDQUFDLFNBQVMsQ0FBQztJQUNwQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFFdEIsSUFBSSxJQUFJLEtBQUssU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUM3QixNQUFNLEdBQUcsUUFBUSxDQUFDO0tBQ3JCO1NBQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUNwQyxNQUFNLEdBQUcsUUFBUSxDQUFDO0tBQ3JCO1NBQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxDQUFDLFFBQVEsRUFBRTtLQUV2QztJQUNELGtCQUFrQjtJQUNsQix5Q0FBeUM7SUFDekMsNkJBQTZCO0lBQzdCLGlCQUFpQjtJQUNqQix5Q0FBeUM7SUFDekMsNkJBQTZCO0lBQzdCLGlCQUFpQjtJQUNqQix5Q0FBeUM7SUFDekMsNkJBQTZCO0lBQzdCLGlCQUFpQjtJQUNqQix5Q0FBeUM7SUFDekMsZUFBZTtJQUNmLDZCQUE2QjtJQUM3QixpQkFBaUI7SUFDakIsSUFBSTtJQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxJ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