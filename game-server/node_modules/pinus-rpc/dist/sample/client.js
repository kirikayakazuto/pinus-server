"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require('source-map-support/register');
const preload_1 = require("./preload");
preload_1.preload();
const pinusrpc = require("..");
const pinus_logger_1 = require("pinus-logger");
const __1 = require("../");
// configure('./config/log4js.json');
let logger = pinus_logger_1.getLogger('pinus-rpc', 'sample-client');
// remote service interface path info list
const records = [
    { namespace: 'user', serverType: 'test', path: __dirname + '/remote/test' }
];
const context = {
    serverId: 'test-server-1'
};
// server info list
const servers = [
    { id: 'test-server-1', serverType: 'test', host: '127.0.0.1', port: 3333 },
    { id: 'test-server-2', serverType: 'test', host: '127.0.0.1', port: 3334 },
    { id: 'test-server-3', serverType: 'test', host: '127.0.0.1', port: 3335 },
    { id: 'unuse-server-1', serverType: 'unuse', host: '127.0.0.1', port: 3336 }
];
// route parameter passed to route function
let routeParam = null;
// route context passed to route function
const routeContext = servers;
// route function to caculate the remote server id
const routeFunc = function (routeParam, msg, routeContext, cb) {
    cb(null, routeContext[0].id);
};
const client = pinusrpc.createClient({ routeContext: routeContext,
    router: routeFunc, context: context,
    mailboxFactory: __1.createTcpMailBox,
    bufferMsg: true,
    interval: 2000,
    timeout: 20000
});
client.start(err => {
    if (err) {
        console.error('start client err', err);
        return;
    }
    client.addProxies(records);
    client.addServers(servers);
    // test().then(ret =>
    //     console.log('test end ret', ret))
    //     .catch(err => {
    //         console.error(' test end with err', err);
    //     });
    client.proxies.user.test.service.echo.toServer('test-server-3', 111, 'DDD', 'unused')
        .then(ret => {
        console.log(' rpc end ret1', ret);
    })
        .catch(err => {
        console.error(' rpc end err', err);
    });
    client.proxies.user.test.service.echo.toServer('test-server-1', 666, 'AAA1111').then(ret => {
        console.log('@@111', ret);
    });
    client.proxies.user.test.service.echo.toServer('test-server-1', 666, 'AAA@@').then(ret => {
        console.log('@@222', ret);
    });
    client.proxies.user.test.service.echo.to('test-server-1', true)(666, 'AAA###').then(ret => {
        console.log('@@@333', ret);
    });
    setTimeout(() => {
        client.proxies.user.test.service.echo.toServer('test-server-3', 222, 'DDD2', 'unused')
            .then(ret => {
            console.log(' rpc end ret2', ret);
        })
            .catch(err => {
            console.error(' rpc end err', err);
        });
    }, 5000);
    test().then(ret => console.log('test ret', ret)).catch(err => console.log('test err', err));
});
async function test() {
    console.log('rpc client start ok.');
    let m = Buffer.from('hello');
    // n = 'bbb';
    let fs = require('fs');
    // m = fs.readFileSync('./skill.js').toString();
    m = ['onReloadSkill',
        // [ m ],
        ['210108'],
        { type: 'push', userOptions: {}, isPush: true }];
    // m = ['route', [m], {}, {}];
    // m = require('./test');
    // m = 3.14;
    // m = 'aaa';
    // m = 100325;
    // m = {a: '111', b: 'bbb', c: 'ccc'};
    // m = [1, '2', {a: 'bbb'}, 3.12, m, false];
    // m = false;
    // m = '0';
    //   function(err, resp, data) {
    //       // client.proxies.user.test.service.echo(routeParam, m, 'aaa', function(err, resp, data) {
    //       if(err) {
    //           console.error(err.stack);
    //       }
    //
    //       // setTimeout(function() {
    //       console.log(resp);
    //       console.log(data);
    //       // console.log(typeof resp)
    //       // console.log(resp.toString())
    //       // }, 1000);
    //   }
    // const rets = await client.proxies.user.test.service.echo(null, m, 'aaa');
    // console.log('rets', rets);
    // const toServerRet = await client.proxies.user.test.service.echo.toServer('test-server-1', m, 'aaa');
    // console.log('toServerRet', toServerRet);
    try {
    }
    catch (err) {
        console.log('~~ toServer(*) err', err);
    }
    const toServersRet = await client.proxies.user.test.service.echo.toServer('test-server-3', m, 'zzDDD', 'unused');
    console.log('toServersRet', JSON.stringify(toServersRet, null, 4));
    console.log('!!!!@@');
    await new Promise(done => setTimeout(done, 5000));
    console.log('~~ latency end');
    const latencyRet = await client.proxies.user.test.service.echo.toServer('test-server-3', 'latency!!', 'aaa');
    console.log('~~~ latency', latencyRet);
    return 'test success';
}
process.on('rejectionHandled', p => {
    console.error('rejectionHandled !!~~', p);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2FtcGxlL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBRXZDLHVDQUFrQztBQUNsQyxpQkFBTyxFQUFFLENBQUM7QUFDViwrQkFBK0I7QUFFL0IsK0NBQXVDO0FBQ3ZDLDJCQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMsSUFBSSxNQUFNLEdBQUcsd0JBQVMsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFFckQsMENBQTBDO0FBQzFDLE1BQU0sT0FBTyxHQUFHO0lBQ2QsRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsR0FBRyxjQUFjLEVBQUM7Q0FDMUUsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHO0lBQ2QsUUFBUSxFQUFFLGVBQWU7Q0FDMUIsQ0FBQztBQUVGLG1CQUFtQjtBQUNuQixNQUFNLE9BQU8sR0FBRztJQUNkLEVBQUMsRUFBRSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQztJQUN4RSxFQUFDLEVBQUUsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7SUFDeEUsRUFBQyxFQUFFLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO0lBQ3hFLEVBQUMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO0NBQzNFLENBQUM7QUFFRiwyQ0FBMkM7QUFDM0MsSUFBSSxVQUFVLEdB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