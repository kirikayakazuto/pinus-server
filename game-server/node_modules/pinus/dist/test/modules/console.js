"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const should = require("should");
// import { describe, it } from "mocha-typescript"
let pinus = require('../../lib/index');
let consoleModule = require('../../lib/modules/console');
describe('console module test', function () {
    describe('#monitorHandler', function () {
        it('should execute the corresponding command with different signals', function () {
            let flag;
            let rs;
            let opts = {
                app: {
                    components: {
                        __connector__: {
                            blacklist: []
                        }
                    },
                    stop: function (value) {
                        flag = value;
                    },
                    addCrons: function (array) {
                        rs = array;
                    },
                    removeCrons: function (array) {
                        rs = array;
                    },
                    isFrontend: function () {
                        return true;
                    }
                }
            };
            let module = new consoleModule(opts);
            let agent1 = {
                type: 'area'
            };
            let msg1 = { signal: 'stop' };
            module.monitorHandler(agent1, msg1);
            flag.should.eql(true);
            let msg2 = { signal: 'list' };
            let agent2 = {
                type: 'chat',
                id: 'chat-server-1'
            };
            module.monitorHandler(agent2, msg2, function (obj) {
                obj.serverId.should.eql('chat-server-1');
                obj.body.serverType.should.eql('chat');
            });
            let msg3 = { signal: 'addCron' };
            module.monitorHandler(agent2, msg3, null);
            rs.length.should.eql(1);
            let msg4 = { signal: 'removeCron' };
            module.monitorHandler(agent2, msg4, null);
            rs.length.should.eql(1);
            let msg5 = { signal: 'blacklist', blacklist: ['127.0.0.1'] };
            module.monitorHandler(agent1, msg5, null);
            opts.app.components.__connector__.blacklist.length.should.eql(1);
        });
    });
    describe('#clientHandler', function () {
        let _exit;
        let _setTimeout;
        let __setTimeout;
        let exitCount = 0;
        before(function (done) {
            _exit = process.exit;
            _setTimeout = __setTimeout;
            done();
        });
        after(function (done) {
            process.exit = _exit;
            __setTimeout = _setTimeout;
            done();
        });
        let opts = {
            app: {
                clusterSeq: {},
                stop: function (value) {
                    return value;
                },
                getServerById: function () {
                    return {
                        host: '127.0.0.1'
                    };
                },
                getServers: function () {
                    return {
                        'chat-server-1': {}
                    };
                },
                get: function (value) {
                    switch (value) {
                        case 'main':
                            return __dirname + '/../../index.js';
                        case 'env':
                            return 'dev';
                    }
                },
                set: function (value) {
                    return value;
                },
                getServersByType: function () {
                    return [{ id: 'chat-server-1' }];
                }
            }
        };
        let module = new consoleModule(opts);
        it('should execute kill command', function (done) {
            let msg = { signal: 'kill' };
            process.exit = function () { exitCount++; };
            __setTimeout = function (cb, timeout) {
                if (timeout > 3000) {
                    timeout = 3000;
                }
                _setTimeout(cb, timeout);
            };
            let agent1 = {
                request: function (recordId, moduleId, msg, cb) {
                    cb('chat-server-1');
                },
                idMap: {
                    'chat-server-1': {
                        type: 'chat',
                        id: 'chat-server-1'
                    }
                }
            };
            module.clientHandler(agent1, msg, function (err, result) {
                should.not.exist(err);
                should.exist(result.code);
            });
            let agent2 = {
                request: function (recordId, moduleId, msg, cb) {
                    cb(null);
                },
                idMap: {
                    'chat-server-1': {
                        type: 'chat',
                        id: 'chat-server-1'
                    }
                }
            };
            module.clientHandler(agent2, msg, function (err, result) {
                should.not.exist(err);
                should.exist(result.code);
                result.code.should.eql('remained');
                done();
            });
        });
        it('should execute stop command', function (done) {
            let msg1 = { signal: 'stop', ids: ['chat-server-1'] };
            let msg2 = { signal: 'stop', ids: [] };
            let agent = {
                notifyById: function (serverId, moduleId, msg) {
                },
                notifyAll: function (moduleId, msg) {
                }
            };
            module.clientHandler(agent, msg1, function (err, result) {
                result.status.should.eql('part');
            });
            module.clientHandler(agent, msg2, function (err, result) {
                result.status.should.eql('all');
                done();
            });
        });
        it('should execute list command', function () {
            let msg = { signal: 'list' };
            let agent = {
                request: function (recordId, moduleId, msg, cb) {
                    cb({ serverId: 'chat-server-1', body: { 'server': {} } });
                },
                idMap: {
                    'chat-server-1': {
                        type: 'chat',
                        id: 'chat-server-1'
                    }
                }
            };
            module.clientHandler(agent, msg, function (err, result) {
                should.exist(result.msg);
            });
        });
        it('should execute add command', function () {
            let msg1 = { signal: 'add', args: ['host=127.0.0.1', 'port=88888', 'clusterCount=2'] };
            let msg2 = { signal: 'add', args: ['host=127.0.0.1', 'port=88888', 'id=chat-server-1', 'serverType=chat'] };
            let agent = {};
            module.clientHandler(agent, msg1, function (err, result) {
                should.not.exist(err);
                result.length.should.eql(0);
            });
            module.clientHandler(agent, msg2, function (err, result) {
                result.status.should.eql('ok');
            });
        });
        it('should execute blacklist command', function () {
            let msg1 = { signal: 'blacklist', args: ['127.0.0.1'] };
            let msg2 = { signal: 'blacklist', args: ['abc'] };
            let agent = {
                notifyAll: function (moduleId, msg) {
                }
            };
            module.clientHandler(agent, msg1, function (err, result) {
                result.status.should.eql('ok');
            });
            module.clientHandler(agent, msg2, function (err, result) {
                should.exist(err);
            });
        });
        it('should execute restart command', function () {
            let msg1 = { signal: 'restart', ids: ['chat-server-1'] };
            let msg2 = { signal: 'restart', type: 'chat', ids: [] };
            let agent = {
                request: function (recordId, moduleId, msg, cb) {
                    cb(null);
                }
            };
            module.clientHandler(agent, msg1, function (err, result) {
                should.exist(err);
            });
            module.clientHandler(agent, msg2, function (err, result) {
                should.exist(err);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvbW9kdWxlcy9jb25zb2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLGtEQUFrRDtBQUNsRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUN2QyxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUd6RCxRQUFRLENBQUMscUJBQXFCLEVBQUU7SUFDNUIsUUFBUSxDQUFDLGlCQUFpQixFQUFFO1FBQ3hCLEVBQUUsQ0FBQyxpRUFBaUUsRUFBRTtZQUNsRSxJQUFJLElBQWEsQ0FBQztZQUNsQixJQUFJLEVBQWMsQ0FBQztZQUNuQixJQUFJLElBQUksR0FBUTtnQkFDWixHQUFHLEVBQUU7b0JBQ0QsVUFBVSxFQUFFO3dCQUNSLGFBQWEsRUFBRTs0QkFDWCxTQUFTLEVBQUUsRUFBRTt5QkFDaEI7cUJBQ0o7b0JBQ0QsSUFBSSxFQUFFLFVBQVUsS0FBYzt3QkFDMUIsSUFBSSxHQUFHLEtBQUssQ0FBQztvQkFDakIsQ0FBQztvQkFDRCxRQUFRLEVBQUUsVUFBVSxLQUFpQjt3QkFDakMsRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDO29CQUNELFdBQVcsRUFBRSxVQUFVLEtBQWlCO3dCQUNwQyxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUM7b0JBQ0QsVUFBVSxFQUFFO3dCQUNSLE9BQU8sSUFBSSxDQUFDO29CQUNoQixDQUFDO2lCQUNKO2FBQ0osQ0FBQztZQUNGLElBQUksTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUksTUFBTSxHQUFHO2dCQUNULElBQUksRUFBRSxNQUFNO2FBQ2YsQ0FBQztZQUNGLElBQUksSUFBSSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxj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