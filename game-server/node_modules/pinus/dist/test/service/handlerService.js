"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const should = require("should");
// import { describe, it } from "mocha-typescript"
let HandlerService = require('../../lib/common/service/handlerService');
class MockApp {
    constructor() {
        this.serverType = 'connector';
    }
    get(key) {
        this[key];
    }
}
let mockApp = new MockApp();
let mockSession = {
    exportSession: function () {
        return this;
    }
};
let mockMsg = { key: 'some request message' };
let mockRouteRecord = { serverType: 'connector', handler: 'testHandler', method: 'testMethod' };
describe('handler service test', function () {
    describe('handle', function () {
        it('should dispatch the request to the handler if the route match current server type', function (done) {
            let invoke1Count = 0, invoke2Count = 0;
            // mock datas
            let mockHandlers = {
                testHandler: {
                    testMethod: function (msg, session, next) {
                        invoke1Count++;
                        msg.should.eql(mockMsg);
                        next();
                    }
                },
                test2Handler: {
                    testMethod: function (msg, session, next) {
                        invoke2Count++;
                        next();
                    }
                }
            };
            let mockOpts = {};
            let service = new HandlerService(mockApp, mockOpts);
            service.handlerMap = { connector: mockHandlers };
            service.handle(mockRouteRecord, mockMsg, mockSession, function () {
                invoke1Count.should.equal(1);
                invoke2Count.should.equal(0);
                done();
            });
        });
        it('should return an error if can not find the appropriate handler locally', function (done) {
            let mockHandlers = {};
            let mockOpts = {};
            let service = new HandlerService(mockApp, mockOpts);
            service.handlerMap = { connector: mockHandlers };
            service.handle(mockRouteRecord, mockMsg, mockSession, function (err) {
                should.exist(err);
                done();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlclNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3NlcnZpY2UvaGFuZGxlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFDakMsa0RBQWtEO0FBQ2xELElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBR3hFO0lBRUU7UUFEQSxlQUFVLEdBQVcsV0FBVyxDQUFDO0lBQ2pCLENBQUM7SUFDakIsR0FBRyxDQUFZLEdBQVc7UUFDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztDQUNGO0FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUU1QixJQUFJLFdBQVcsR0FBRztJQUNoQixhQUFhLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDO0FBRUYsSUFBSSxPQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztBQUM5QyxJQUFJLGVBQWUsR0FBRyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLENBQUM7QUFFaEcsUUFBUSxDQUFDLHNCQUFzQixFQUFFO0lBQy9CLFFBQVEsQ0FBQyxRQUFRLEVBQUU7UUFDakIsRUFBRSxDQUFDLG1GQUFtRixFQUFFLFVBQVUsSUFBZTtZQUMvRyxJQUFJLFlBQVksR0FBRyxDQUFDLEVBQUUsWUFBWSxHQUFHLENBQUMsQ0FBQztZQUN2QyxhQUFhO1lBQ2IsSUFBSSxZQUFZLEdBQUc7Z0JBQ2pCLFdBQVcsRUFBRTtvQkFDWCxVQUFVLEVBQUUsVUFBVSxHQUFRLEVBQUUsT0FBZ0IsRUFBRSxJQUFjO3dCQUM5RCxZQUFZLEVBQUUsQ0FBQzt3QkFDZixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDeEIsSUFBSSxFQUFFLENBQUM7b0JBQ1QsQ0FBQztpQkFDRjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1osVUFBVSxFQUFFLFVBQVUsR0FBUSxFQUFFLE9BQWdCLEVBQUUsSUFBYzt3QkFDOUQsWUFBWSxFQUFFLENBQUM7d0JBQ2YsSUFBSSxFQUFFLENBQUM7b0JBQ1QsQ0FBQztpQkFDRjthQUNGLENBQUM7WUFFRixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFFbEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFFakQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRTtnQkFDcEQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLEVBQUUsQ0FBQztZQUNULENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0VBQXdFLEVBQUUsVUFBVSxJQUFlO1lBQ3BHLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUN0QixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxVQUFVLEdBQUcsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFFakQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEdBQVU7Z0JBQ3hFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xCLElBQUksRUFBRSxDQUFDO1lBQ1QsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==