"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let utils = require('../../lib/util/utils');
// import { describe, it } from "mocha-typescript"
describe('utils test', function () {
    describe('#invokeCallback', function () {
        it('should invoke the function with the parameters', function () {
            let p1 = 1, p2 = 'str';
            let func = function (arg1, arg2) {
                p1.should.equal(arg1);
                p2.should.equal(arg2);
            };
            utils.invokeCallback(func, p1, p2);
        });
        it('should ok if cb is null', function () {
            let p1 = 1, p2 = 'str';
            (function () {
                utils.invokeCallback(null, p1, p2);
            }).should.not.throw();
        });
    });
    describe('#size', function () {
        it('should return the own property count of the object', function () {
            let obj = {
                p1: 'str',
                p2: 1,
                m1: function () { }
            };
            utils.size(obj).should.equal(2);
        });
    });
    describe('#startsWith', function () {
        it('should return true if the string do start with the prefix', function () {
            let src = 'prefix with a string';
            let prefix = 'prefix';
            utils.startsWith(src, prefix).should.be.true;
        });
        it('should return false if the string not start with the prefix', function () {
            let src = 'prefix with a string';
            let prefix = 'prefix222';
            utils.startsWith(src, prefix).should.be.false;
            prefix = 'with';
            utils.startsWith(src, prefix).should.be.false;
        });
        it('should return false if the src not a string', function () {
            utils.startsWith(1, 'str').should.be.false;
        });
    });
    describe('#endsWith', function () {
        it('should return true if the string do end with the prefix', function () {
            let src = 'string with a suffix';
            let suffix = 'suffix';
            utils.endsWith(src, suffix).should.be.true;
        });
        it('should return false if the string not end with the prefix', function () {
            let src = 'string with a suffix';
            let suffix = 'suffix222';
            utils.endsWith(src, suffix).should.be.false;
            suffix = 'with';
            utils.endsWith(src, suffix).should.be.false;
        });
        it('should return false if the src not a string', function () {
            utils.endsWith(1, 'str').should.be.false;
        });
    });
    describe('#hasChineseChar', function () {
        it('should return false if the string does not have any Chinese characters', function () {
            let src = 'string without Chinese characters';
            utils.hasChineseChar(src).should.be.false;
        });
        it('should return true if the string has Chinese characters', function () {
            let src = 'string with Chinese characters 你好';
            utils.hasChineseChar(src).should.be.true;
        });
    });
    describe('#unicodeToUtf8', function () {
        it('should return the origin string if the string does not have any Chinese characters', function () {
            let src = 'string without Chinese characters';
            utils.unicodeToUtf8(src).should.equal(src);
        });
        it('should not return the origin string if the string has Chinese characters', function () {
            let src = 'string with Chinese characters 你好';
            utils.unicodeToUtf8(src).should.not.equal(src);
        });
    });
    describe('#isLocal', function () {
        it('should return true if the ip is local', function () {
            let ip = '127.0.0.1';
            let host = 'localhost';
            let other = '192.168.1.1';
            utils.isLocal(ip).should.be.true;
            utils.isLocal(host).should.be.true;
            utils.isLocal(other).should.be.false;
        });
    });
    describe('#loadCluster', function () {
        it('should produce cluster servers', function () {
            let clusterServer = { host: '127.0.0.1', port: '3010++', serverType: 'chat', cluster: true, clusterCount: 2 };
            let serverMap = {};
            let app = { clusterSeq: {} };
            utils.loadCluster(app, clusterServer, serverMap);
            utils.size(serverMap).should.equal(2);
        });
    });
    describe('#arrayDiff', function () {
        it('should return the difference of two arrays', function () {
            let array1 = [1, 2, 3, 4, 5];
            let array2 = [1, 2, 3];
            let array = utils.arrayDiff(array1, array2);
            array.should.eql([4, 5]);
        });
    });
    describe('#extends', function () {
        it('should extends opts', function () {
            let opts = {
                test: 123
            };
            let add = {
                aaa: 555
            };
            let result = utils.extends(opts, add);
            result.should.eql({
                test: 123,
                aaa: 555
            });
        });
    });
    describe('#ping', function () {
        it('should ping server', function () {
            utils.ping('127.0.0.1', function (flag) {
                flag.should.be.true;
            });
            utils.ping('111.111.111.111', function (flag) {
                flag.should.be.false;
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3V0aWwvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUU1QyxrREFBa0Q7QUFFbEQsUUFBUSxDQUFDLFlBQVksRUFBRTtJQUNyQixRQUFRLENBQUMsaUJBQWlCLEVBQUU7UUFDMUIsRUFBRSxDQUFDLGdEQUFnRCxFQUFFO1lBQ25ELElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBRXZCLElBQUksSUFBSSxHQUFHLFVBQVUsSUFBWSxFQUFFLElBQVk7Z0JBQzdDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0QixFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUM7WUFFRixLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUU7WUFDNUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFDdkIsQ0FBQztnQkFDQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNoQixFQUFFLENBQUMsb0RBQW9ELEVBQUU7WUFDdkQsSUFBSSxHQUFHLEdBQUc7Z0JBQ1IsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFB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