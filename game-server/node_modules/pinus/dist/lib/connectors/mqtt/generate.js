"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol = require("./protocol");
/* TODO: consider rewriting these functions using buffers instead
 * of arrays
 */
/* Publish */
function publish(opts) {
    opts = opts || {};
    let dup = opts.dup ? protocol.DUP_MASK : 0;
    let qos = opts.qos || 0;
    let retain = opts.retain ? protocol.RETAIN_MASK : 0;
    let topic = opts.topic;
    let payload = opts.payload || Buffer.alloc(0);
    let id = (typeof opts.messageId === 'undefined') ? randint() : opts.messageId;
    let packet = { header: 0, payload: [] };
    /* Check required fields */
    if (typeof topic !== 'string' || topic.length <= 0)
        return null;
    /* if payload is a string, we'll convert it into a buffer */
    if (typeof payload === 'string') {
        payload = Buffer.from(payload);
    }
    /* accepting only a buffer for payload */
    if (!Buffer.isBuffer(payload))
        return null;
    if (typeof qos !== 'number' || qos < 0 || qos > 2)
        return null;
    if (typeof id !== 'number' || id < 0 || id > 0xFFFF)
        return null;
    /* Generate header */
    packet.header = protocol.codes.publish << protocol.CMD_SHIFT | dup | qos << protocol.QOS_SHIFT | retain;
    /* Topic name */
    packet.payload = packet.payload.concat(gen_string(topic));
    /* Message ID */
    if (qos > 0)
        packet.payload = packet.payload.concat(gen_number(id));
    let buf = Buffer.from([packet.header]
        .concat(gen_length(packet.payload.length + payload.length))
        .concat(packet.payload));
    return Buffer.concat([buf, payload]);
}
exports.publish = publish;
/* Requires length be a number > 0 */
let gen_length = function (length) {
    if (typeof length !== 'number')
        return null;
    if (length < 0)
        return null;
    let len = [];
    let digit = 0;
    do {
        digit = length % 128 | 0;
        length = length / 128 | 0;
        if (length > 0) {
            digit = digit | 0x80;
        }
        len.push(digit);
    } while (length > 0);
    return len;
};
let gen_string = function (str, without_length) {
    if (arguments.length < 2)
        without_length = false;
    if (typeof str !== 'string')
        return null;
    if (typeof without_length !== 'boolean')
        return null;
    let nums = [];
    let length = 0;
    for (let i = 0; i < str.length; i++) {
        let code = str.charCodeAt(i);
        if (code < 128) {
            nums.push(code);
            ++length;
        }
        else if (code < 2048) {
            nums.push(192 + ((code >> 6)));
            ++length;
            nums.push(128 + ((code) & 63));
            ++length;
        }
        else if (code < 65536) {
            nums.push(224 + ((code >> 12)));
            ++length;
            nums.push(128 + ((code >> 6) & 63));
            ++length;
            nums.push(128 + ((code) & 63));
            ++length;
        }
        else if (code < 2097152) {
            nums.push(240 + ((code >> 18)));
            ++length;
            nums.push(128 + ((code >> 12) & 63));
            ++length;
            nums.push(128 + ((code >> 6) & 63));
            ++length;
            nums.push(128 + ((code) & 63));
            ++length;
        }
        else {
            throw new Error('Can\'t encode character with code ' + code);
        }
    }
    return without_length ? nums : gen_number(length).concat(nums);
};
let gen_number = function (num) {
    let nums = [num >> 8, num & 0x00FF];
    return nums;
};
let randint = function () { return Math.floor(Math.random() * 0xFFFF); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvY29ubmVjdG9ycy9tcXR0L2dlbmVyYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXVDO0FBR3ZDOztHQUVHO0FBRUgsYUFBYTtBQUNiLGlCQUF3QixJQUFTO0lBQzdCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2xCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzlFLElBQUksTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBVyxFQUFFLENBQUM7SUFFakQsMkJBQTJCO0lBQzNCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ2hFLDREQUE0RDtJQUM1RCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEs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