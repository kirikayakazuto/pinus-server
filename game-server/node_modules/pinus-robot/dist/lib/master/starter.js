"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const fs = require("fs");
const vm = require("vm");
require("cliff");
function run(main, message, clients) {
    if (!clients) {
        clients = ['127.0.0.1'];
        prepare(main, message, clients);
    }
    else {
        prepare(main, message, clients);
    }
}
exports.run = run;
function prepare(main, message, clients) {
    let count = parseInt(message.agent, 10) || 1;
    for (let ipindex in clients) {
        for (let i = 0; i < count; i++) {
            let cmd = `"${process.execPath}" ${main}`;
            let ip = clients[ipindex];
            if (ip === '127.0.0.1') {
                localrun(cmd);
            }
            else {
                sshrun(cmd, ip);
            }
        }
    }
}
exports.prepare = prepare;
function sshrun(cmd, host, callback) {
    let hosts = [host];
    log('Executing ' + cmd.yellow + ' on ' + hosts.join(', ').blue);
    let wait = 0;
    let data = [];
    if (hosts.length > 1) {
        starter.parallelRunning = true;
    }
    hosts.forEach(function (host) {
        wait += 1;
        spawnProcess('ssh', [host, cmd], function (err, out) {
            if (!err) {
                data.push({
                    host: host,
                    out: out
                });
            }
            done(err);
        });
    });
    let error;
    function done(err) {
        error = error || err;
        if (--wait === 0) {
            starter.parallelRunning = false;
            if (error) {
                abort('FAILED TO RUN, return code: ' + error);
            }
            else if (callback) {
                callback(data);
            }
        }
    }
}
exports.sshrun = sshrun;
function localrun(cmd, callback) {
    log('Executing ' + cmd.green + ' locally');
    spawnProcess(cmd, ['', ''], function (err, data) {
        if (err) {
            abort('FAILED TO RUN, return code: ' + err);
        }
        else {
            if (callback)
                callback(data);
        }
    });
}
exports.localrun = localrun;
let starter = new class {
};
function set(key, def) {
    if (typeof def === 'function') {
        starter.__defineGetter__(key, def);
    }
    else {
        starter.__defineGetter__(key, function () {
            return def;
        });
    }
}
exports.set = set;
function load(file) {
    if (!file)
        throw new Error('File not specified');
    log('Executing compile ' + file);
    let code = fs.readFileSync(file).toString();
    vm.runInNewContext(code, starter);
}
exports.load = load;
function abort(msg) {
    log(msg.red);
    // process.exit(1);
}
exports.abort = abort;
let log = console.log;
/**
 *begin notify to run agent
 *
 *
 */
function addBeauty(prefix, buf) {
    let out = prefix + ' ' + buf
        .toString()
        .replace(/\s+$/, '')
        .replace(/\n/g, '\n' + prefix);
    return out.green;
}
function spawnProcess(command, options, callback) {
    let child = null;
    if (!!options[0]) {
        child = cp.spawn(command, options);
    }
    else {
        child = cp.exec(command, options);
    }
    let prefix = command === 'ssh' ? '[' + options[0] + '] ' : '';
    prefix = prefix.grey;
    // child.stderr.on('data', function (chunk) {
    //    log(addBeauty(chunk));
    // });
    let res = [];
    child.stdout.on('data', function (chunk) {
        res.push(chunk.toString());
        log(addBeauty(chunk));
    });
    function addBeauty(buf) {
        return prefix + buf
            .toString()
            .replace(/\s+$/, '')
            .replace(/\n/g, '\n' + prefix);
    }
    child.on('exit', function (code) {
        if (callback) {
            callback(code === 0 ? null : code, res && res.join('\n'));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tYXN0ZXIvc3RhcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFxQztBQUNyQyx5QkFBeUI7QUFDekIseUJBQXlCO0FBSXpCLGlCQUFlO0FBRWYsYUFBb0IsSUFBWSxFQUFFLE9BQVksRUFBRSxPQUFtQjtJQUMvRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1YsT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDeEIsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbkM7U0FBTTtRQUNILE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0FBQ0wsQ0FBQztBQVBELGtCQU9DO0FBRUQsaUJBQXdCLElBQVksRUFBRSxPQUF1QixFQUFFLE9BQW1CO0lBQzlFLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxLQUFLLElBQUksT0FBTyxJQUFJLE9BQU8sRUFBRTtRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLElBQUksR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUMxQyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsSUFBSSxFQUFFLEtBQUssV0FBVyxFQUFFO2dCQUNwQixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0gsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUNuQjtTQUNKO0tBQ0o7QUFDTCxDQUFDO0FBYkQsMEJBYUM7QUFFRCxnQkFBdUIs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