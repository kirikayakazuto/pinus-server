"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ------------------------------------
// Statistics Manager
// ------------------------------------
//
// This file defines qputs, qprint, and extends the util namespace.
//
// Extends node.js util.js with other common functions.
//
let fs = require('fs');
exports.getPath = function () {
    let path = './';
    if (__filename.indexOf('node_modules') === -1) {
        path = __filename.substring(0, __filename.lastIndexOf('/')) + '/../../log';
    }
    else {
        path = __filename.substring(0, __filename.lastIndexOf('node_modules')) + 'log';
    }
    return path;
};
exports.createPath = function () {
    let path = exports.getPath();
    if (!require('fs').existsSync(path)) {
        fs.mkdirSync(path);
    }
};
exports.deleteLog = function () {
    let path = exports.getPath();
    try {
        fs.unlinkSync(path + '/detail');
        fs.unlinkSync(path + '/.log');
    }
    catch (ex) {
    }
};
// A few common global functions so we can access them with as few keystrokes as possible
//
exports.qputs = function (s) {
    console.log(s);
};
exports.qprint = function (s) {
    console.log(s);
};
// Static utility methods
//
exports.uid = function () {
    exports.lastUid_ = exports.lastUid_ || 0;
    return exports.lastUid_++;
};
exports.defaults = function (obj, defaults) {
    for (let i in defaults) {
        if (obj[i] === undefined) {
            obj[i] = defaults[i];
        }
    }
    return obj;
};
exports.extend = function (obj, extension) {
    for (let i in extension) {
        if (extension.hasOwnProperty(i)) {
            obj[i] = extension[i];
        }
    }
    return obj;
};
exports.forEach = function (obj, f) {
    for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
            f(i, obj[i]);
        }
    }
};
exports.every = function (obj, f) {
    for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
            if (!f(i, obj[i])) {
                return false;
            }
        }
    }
    return true;
};
exports.argarray = function (args) {
    return Array.prototype.slice.call(args);
};
exports.readStream = function (stream, callback) {
    let data = [];
    stream.on('data', function (chunk) {
        data.push(chunk.toString());
    });
    stream.on('end', function () {
        callback(data.join(''));
    });
};
/** Same arguments as http.createClient. Returns an wrapped http.Client object that will reconnect when
connection errors are detected. In the current implementation of http.Client (11/29/10), calls to
request() fail silently after the initial 'error' event. */
exports.createReconnectingClient = function () {
    let http = require('http'), clientArgs = arguments, events = {}, client, wrappedClient = {}, clientMethod = function (method) {
        return function () { return client[method].apply(client, arguments); };
    }, clientGetter = function (member) { return function () { return client[member]; }; }, clientSetter = function (member) { return function (val) { client[member] = val; }; }, reconnect = function () {
        let oldclient = client;
        if (oldclient) {
            oldclient.destroy();
        }
        client = http.createClient.apply(http, clientArgs);
        client._events = exports.extend(events, client._events); // EventEmitter._events stores event handlers
        client.emit('reconnect', oldclient);
    };
    // Create initial http.Client
    reconnect();
    client.on('error', function (err) { reconnect(); });
    // Wrap client so implementation can be swapped out when there are connection errors
    for (let j in client) {
        if (typeof client[j] === 'function') {
            wrappedClient[j] = clientMethod(j);
        }
        else {
            wrappedClient.__defineGetter__(j, clientGetter(j));
            wrappedClient.__defineSetter__(j, clientSetter(j));
        }
    }
    wrappedClient.impl = client;
    return wrappedClient;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tb24vdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHVDQUF1QztBQUN2QyxxQkFBcUI7QUFDckIsdUNBQXVDO0FBQ3ZDLEVBQUU7QUFDRixtRUFBbUU7QUFDbkUsRUFBRTtBQUNGLHVEQUF1RDtBQUN2RCxFQUFFO0FBR0YsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRVosUUFBQSxPQUFPLEdBQUc7SUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUMzQyxJQUFJLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQztLQUM5RTtTQUFNO1FBQ0gsSUFBSSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7S0FDbEY7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFUyxRQUFBLFVBQVUsR0FBRztJQUNwQixJQUFJLElBQUksR0FBRyxlQUFPLEVBQUUsQ0FBQztJQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3RCO0FBQ0wsQ0FBQyxDQUFDO0FBRVMsUUFBQSxTQUFTLEdBQUc7SUFDbkIsSUFBSSxJQUFJLEdBQUcsZUFBTyxFQUFFLENBQUM7SUFDckIsSUFBSTtRQUNBLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLFNBQVMs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